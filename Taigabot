#!/usr/bin/env python3

# Standard Libs
import asyncio
import signal
import ssl
from pathlib import Path
from typing import Dict, List

# First Party
from bot import Taigabot
from core import data


def ssl_context(cert: str = None, key: str = None,
                verify: bool = True) -> ssl.SSLContext:
    context = ssl.SSLContext(ssl.PROTOCOL_TLS)
    context.options |= ssl.OP_NO_SSLv2
    context.options |= ssl.OP_NO_SSLv3
    context.options |= ssl.OP_NO_TLSv1
    context.load_default_certs()

    if verify:
        context.verify_mode = ssl.CERT_REQUIRED
    if cert and key:
        context.load_cert_chain(cert, keyfile=key)

    return context


async def main() -> None:
    config_file = Path('.').resolve() / 'config.json'
    config = data.Config(config_file)
    for server_name, server_config in config.servers.items():
        if server_config.ssl:
            ssl = True
        else:
            ssl = False
        if server_config.sasl_method == 'external':
            if not server_config.ssl:
                print('Must enable ssl to use external sasl.')
            else:
                cert = server_config.sasl_cert
                key = server_config.sasl_key
                ssl = ssl_context(cert, key)
        bot = Taigabot(config, server_name, ssl)
        bot_objects.append(bot)
        bot_tasks[server_name] = bot.start()
    await asyncio.gather(*bot_tasks.values())


bot_tasks: Dict[str, Taigabot] = {}
bot_objects: List[Taigabot] = []
try:
    asyncio.run(main())
except KeyboardInterrupt:
    for bot in bot_objects:
        try:
            bot.close_connection()
        except RuntimeError:
            pass
